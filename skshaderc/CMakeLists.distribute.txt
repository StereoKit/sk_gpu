cmake_minimum_required(VERSION 3.9.2)

project(skshaderc VERSION 1.0
                  DESCRIPTION "Shader compiler for sk_gpu.h"
                  LANGUAGES CXX)

add_library(skshaderc INTERFACE)

target_include_directories(skshaderc INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/src)

if (APPLE)
    set(SKSHADERC_EXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools/mac)
elif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows" AND (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "AMD64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64"))
    set(SKSHADERC_EXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools/win32_x64)
elif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "ARM64")
    set(SKSHADERC_EXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools/win32_arm64)
elif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
    set(SKSHADERC_EXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools/linux_x64)
elif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux" AND (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64" OR CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "arm64"))
    set(SKSHADERC_EXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools/linux_arm64)
else()
    message(FATAL_ERROR "No shader compiler available for this platform!")
endif

macro(SKSHADERC_COMPILE_HEADERS LIST COMMAND_STRING OUT_LIST)
    set(SKSHADERC_COMPILE_COMMANDS ${COMMAND_STRING})
    separate_arguments(SKSHADERC_COMPILE_COMMANDS)

    foreach(SHADER ${${LIST}})
        add_custom_command(
            OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}.h
            COMMAND ${SKSHADERC_EXE_PATH} -h ${SKSHADERC_COMPILE_COMMANDS} ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}
            DEPENDS 
                ${SHADER} 
                ${SKSHADERC_EXE_PATH}
            COMMENT "skshaderc -h ${COMMAND_STRING} ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}")
        list(APPEND ${OUT_LIST} ${SHADER}.h)
    endforeach(SHADER)
endmacro()

macro(SKSHADERC_COMPILE_ASSETS LIST COMMAND_STRING)
    set(SKSHADERC_COMPILE_COMMANDS ${COMMAND_STRING})
    separate_arguments(SKSHADERC_COMPILE_COMMANDS)

    foreach(SHADER ${${LIST}})
        add_custom_command(
            OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}.sks
            COMMAND ${SKSHADERC_EXE_PATH} ${SKSHADERC_COMPILE_COMMANDS} ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}
            DEPENDS 
                ${SHADER} 
                ${SKSHADERC_EXE_PATH}
            COMMENT "skshaderc ${COMMAND_STRING} ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER}")
    endforeach(SHADER)
endmacro()